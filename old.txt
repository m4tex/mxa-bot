// client.on('loggedOn', () => {
//     client.setPersona(SteamUser.EPersonaState.Online)
//     client.gamesPlayed(["Good Soup, my bot is working ;-;"])
//     console.log("logged in.");
// })

// client.on('friendMessage', function (steamID, message) {
//     console.log(message);
//     enteredCmd = message;
// })

//#region chatbot
// messageIDS = []
// var currentUser;
// var stopCommandEntered = false;

// client.on("friendMessage", function (steamID, message) {
//     if (message == "!stop!") {
//         stopCommandEntered = true;
//     } else
//     if (message.toLowerCase().includes("gay") || message.toLowerCase().includes("bÃ¶g")) {
//         client.chatMessage(steamID, "Yes, I agree. You're gay.")
//     } else if (message.toLowerCase().includes("wtf")) {
//         client.chatMessage(steamID, "Surprised, are we? Not a surprise for me...");
//     } else
//     if (messageIDS.some(obj => obj.steamID == steamID.accountid)) {
//         currentUser = messageIDS.findIndex(obj => obj.steamID === steamID.accountid);
//     } else {
//         messageIDS.push({
//             steamID: steamID.accountid,
//             messageID: 0
//         })
//         currentUser = messageIDS.length - 1;
//     }
//     var mess = "";
//     switch (messageIDS[currentUser].messageID) {
//         case 0:
//             mess = "Hi :3. M4tex is currently unavaliable, try again later >.<"
//             break;
//         case 1:
//             mess = "Hey.. he is not here.. ask him later.. shoosh!"
//             break;
//         case 2:
//             mess = "STOP!"
//             break;
//         case 3:
//             mess = ". . ."
//             break;
//         case 4:
//             mess = "You are a piece of work, you know that?"
//             break;
//         case 5:
//             mess = "I'll make sure to tell him later that you're a jerk."
//             break;
//         case 6:
//             mess = "Oh.. come on!! Get out of here! Don't you have anything better to do?!"
//             break;
//         case 7:
//             mess = "I refuse to answer"
//             break;
//         case 8:
//             mess = "One more time and I'll get angry."
//             break;
//         case 9:
//             triggered(steamID);
//             break;
//         default:
//             mess = "..."
//             break;
//     }
//     client.chatMessage(steamID, mess)

//     messageIDS[currentUser].messageID += 1;

//     console.log(messageIDS);
// });

// async function triggered(id) {
//     var messagesSent = 0;

//     client.chatMessage(id, "Okay.. you want it, you got it...");
//     for (var i = 3; i > 0; i--) {
//         client.chatMessage(id, `Message Incoming in ${i}...`);
//         await new Promise(resolve => setTimeout(resolve, 1000));
//     }
//     while (!stopCommandEntered) {
//         if (messagesSent < 10) {
//             client.chatMessage(id, "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                     "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                     "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!") +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!" +
//                 "EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!EAT IT!"
//         } else {
//             messagesSent = 0;
//             // client.chatMessage(id, "TYPE !stop! TO STOP THE SPAM :)");
//         }

//         messagesSent++;
//         await new Promise(resolve => setTimeout(resolve, 200));
//     }
// }
//#endregion


// function sendTrade(){
//     let offer = manager.createOffer('https://steamcommunity.com/tradeoffer/new/?partner=176566804&token=anzdUiyt');

//     if (items[0].tradable) {
//         offer.addTheirItem(items[0]);

//         offer.send((err) => {
//             if (err) {
//                 console.log(err);
//             }
//         });
//         console.log("Sent a trade offer");
//     }
// }


// const rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout
// });

// manager.setCookies(cookies, function (err) {

//     rl.question("Start? ", function (e) {
//         sendTrade();
//         rl.close();
//     })
// })

// var loopCondition = false;
// while (!loopCondition) {
//     manager.getUserInventoryContents('76561198136832532', 730, 2, true, function (err, inventory) {
//         if (!inventory.includes(items[0])) {
//             loopCondition = true
//         }else{
//             console.log('no knife found...');
//         }
//     })

//     await new Promise(resolve => setTimeout(resolve, 10000));
// }

var collections
async function db() {
   collections = await require('../modules/databaseManager')
}
db()

module.exports = {
    name: 'unset',
    description: 'This command unsets a channel from a specified mode.',
    execute: async function (msg, args) {
        if (args[0] === 'dev') {
            if (await collections.devchannels.countDocuments({ channelID: msg.channelId }, { limit: 1}) === 1) {
                await collections.devchannels.deleteOne({ channelID: msg.channelId })
                msg.channel.send("Removed the `dev` mode from this channel.")
            } else {
                msg.channel.send("This channel is not set to 'dev' mode.")
            }
        } else {
            msg.channel.send("Couldn't find channel mode: " + args[0] + ". Please make sure there are no misspellings or use `mxa help` to get a full list of commands.")
        }
    }
}

var collections
async function db() {
   collections = await require('../modules/databaseManager')
}
db()

module.exports = {
  name: "set",
  description: "Assigns channel's purpose",
  execute: async function(msg, args) {
    if (args[0] === 'dev') {
      var res = await collections.devchannels.countDocuments({channelID: msg.channelId}, { limit: 1})
      if (res === 1) {
        msg.channel.send("This channel is already set to dev mode.")
      } else {
        collections.devchannels.insertOne({channelID: msg.channelId})
        msg.channel.send("Set this channel to dev mode.")
      }
    }
    else{
      msg.channel.send("Couldn't find channel mode: " + args[0] + ". Please make sure there are no misspellings or use `mxa help` to get a full list of commands.")
    }
  }
}

var collections
async function db() {
   collections = await require('../modules/databaseManager')
}
db()

const extraData = require('../modules/commandData')

module.exports = {
    name: 'guard',
    description: 'Enters the steam bot steam guard code.',
    execute: function (msg, tokens) {
        if (extraData.loggedOn === false) {
            extraData.steamGuardCallback(tokens[0])
        } else {
            msg.channel.send("The bot is already logged into the account.")
        }
    }
}